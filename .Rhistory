school_address
proc_school_name
processed_people
school_population
school_population[-which(school_population$index == proc_people$index), ]
school_assigned_people[[proc_school_name]]
school_assigned_people[[proc_school_name]]
full_school
full_school
source("~/Github/Syspop/syspop/run_nz.R")
processed_people
View(processed_school_population)
processed_school_population
pop_data[rownames(processed_school_population), ] <- processed_school_population[, names(pop_data)]
processed_school_population
View(pop_data)
source("~/Github/Syspop/syspop/run_nz.R")
processed_people
View(pop_data)
rownames(processed_school_population)
pop_data_updated <- pop_data %>%
left_join(processed_school_population, by = "index", suffix = c("", ".B")
)
View(pop_data_updated)
pop_data %>%
left_join(processed_school_population, by = "index", suffix = c("", ".B")) %>%  # Join pop_data with processed_school_population
mutate(ValueA = ifelse(is.na(ValueA.B), ValueA, ValueA.B))
processed_school_population
rownames(processed_school_population) <- NULL
rownames(processed_school_population)
source("~/Github/Syspop/syspop/run_nz.R")
proc_row
source("~/Github/Syspop/syspop/run_nz.R")
View(pop_data)
school_address
assign_address_flag
!is.null(address_data)
school_address
View(school_address)
school_address_df <- as.data.frame(school_address)
View(school_address_df)
source("~/Github/Syspop/syspop/run_nz.R")
data_type
address_data
View(address_data)
x = list(pop_data = pop_data, address_data = address_data))
list(pop_data = pop_data, address_data = address_data)
x = list(pop_data = pop_data, address_data = address_data)
x$pop_data
debugSource("~/Github/Syspop/syspop/run_nz.R")
test_data$`kindergarten_data//kindergarten`
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
output$pop_data
write_parquet(output$base_pop, file.path(tmp_dir, "syspop_base.parquet"))
typeof(output$base_pop)
output$base_pop
output$pop_data
source("~/Github/Syspop/syspop/run_nz.R")
renv::snapshot()
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
debugSource("~/Github/Syspop/syspop/run_nz.R")
test_data$`supermarket_data//supermarket`
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
base_pop <- read_parquet(file.path(tmp_dir, "syspop_base.parquet"))
base_address <- read_parquet(file.path(tmp_dir, "syspop_location.parquet"))
View(base_pop)
household_address <- merge(
base_pop_data[, "household", drop = FALSE],
address_data[, c("name", "latitude", "longitude")],
by.x = "household",
by.y = "name",
all.x = TRUE
)
household_address <- merge(
base_pop[, "household", drop = FALSE],
base_address[, c("name", "latitude", "longitude")],
by.x = "household",
by.y = "name",
all.x = TRUE
)
View(household_address)
household_address <- unique(household_address[, c("household", "latitude", "longitude")])
area_name_keys_and_selected_nums
names(area_name_keys_and_selected_nums)
shared_space_type
shared_space_data
base_pop_data
geo_location
area_name_keys_and_selected_nums[[area_name_key]]
assign_address_flag
area_name_key
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
shared_space_data
paste0("latitude_", shared_space_name)
paste0("longitude_", shared_space_name)
shared_space_data
names(shared_space_data)[names(shared_space_data) == "latitude"] <- paste0("latitude_", shared_space_name)
names(shared_space_data)[names(shared_space_data) == "longitude"] <- paste0("longitude_", shared_space_name)
names(shared_space_data)[names(shared_space_data) == "name"] <- shared_space_name
shared_space_data
area_name_key
pop_data
household_address
pop_data <- merge(
pop_data,
household_address[, c("household", "latitude", "longitude")],
by = "household",
all.x = TRUE
)
View(pop_data)
names(pop_data)[names(pop_data) == "latitude"] <- "src_latitude"
names(pop_data)[names(pop_data) == "longitude"] <- "src_longitude"
View(pop_data)
source("~/Github/Syspop/syspop/run_nz.R")
num_nearest
distance_matrix <- as.matrix(dist(pop_data[, c("src_latitude", "src_longitude")], shared_space_data[, c(paste0("latitude_", shared_space_name), paste0("longitude_", shared_space_name))], method = "euclidean"))
nearest_indices
nearest_rows
nearest_rows
nearest_indices
source("~/Github/Syspop/syspop/run_nz.R")
nearest_indices <- apply(distance_matrix, 1, which.min)
nearest_indices
distance_matrix
nearest_rows <- shared_space_data[nearest_indices, , drop = FALSE]
View(nearest_rows)
colnames(nearest_rows)[colnames(nearest_rows) == shared_space_name] <- paste0("tmp_", i)
View(nearest_rows)
nearest_rows[, !colnames(nearest_rows) %in% "area"]
nearest_rows <- nearest_rows[, !colnames(nearest_rows) %in% "area"]
View(nearest_rows)
dis_value <- distance_matrix[cbind(1:nrow(nearest_indices), nearest_indices)]
cbind(1:nrow(nearest_indices), nearest_indices)
cbind(1:nrow(nearest_indices), nearest_indices)
nearest_indices
1:nrow(nearest_indices)
nearest_indices
nrow(nearest_indices)
nearest_indices
typeof(nearest_indices)
length(nearest_indices)
nearest_rows
dis_value <- distance_matrix[cbind(1:length(nearest_indices), nearest_indices)]
SHARED_SPACE_NEAREST_DISTANCE_KM
global_vars <- list(
test_data_catalog = "/Users/sijinzhang/Github/Syspop/etc/data/test_data_latest/input/data_catalog.txt"
shared_space_nearest_distance_km <- list(
global_vars <- list(
test_data_catalog = "/Users/sijinzhang/Github/Syspop/etc/data/test_data_latest/input/data_catalog.txt",
shared_space_nearest_distance_km <- list(
supermarket = 2.5
)
)
global_vars$shared_space_nearest_distance_km
global_vars$test_data_catalog
global_vars <- list(
test_data_catalog = "/Users/sijinzhang/Github/Syspop/etc/data/test_data_latest/input/data_catalog.txt",
shared_space_nearest_distance_km <- list(
supermarket = 2.5
)
)
global_vars
global_varsglobal_vars <- list(
test_data_catalog = "/Users/sijinzhang/Github/Syspop/etc/data/test_data_latest/input/data_catalog.txt",
shared_space_nearest_distance_km = list(
supermarket = 2.5
)
)
global_varsglobal_vars$shared_space_nearest_distance_km$supermarket
global_varsglobal_vars$shared_space_nearest_distance_km[["supermarket"]]
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
dis_indices
dis_value
distance_matrix[cbind(1:length(nearest_indices), nearest_indices)]
1:nrows(nearest_indices)
1:nrow(nearest_indices)
dis_value <- distance_matrix[cbind(seq(0, length(nearest_indices)), nearest_indices)]
seq(0, length(nearest_indices))
nearest_indices
distance_matrix
shape(distance_matrix)
dim(distance_matrix)
source("~/Github/Syspop/syspop/run_nz.R")
dim(distance_matrix)
shared_space_data[, c(paste0("latitude_", shared_space_name), paste0("longitude_", shared_space_name))]
pop_data[, c("src_latitude", "src_longitude")]
dist(
pop_data[, c("src_latitude", "src_longitude")],
shared_space_data[, c(paste0("latitude_", shared_space_name), paste0("longitude_", shared_space_name))],
method = "euclidean")
x<-dist(
pop_data[, c("src_latitude", "src_longitude")],
shared_space_data[, c(paste0("latitude_", shared_space_name), paste0("longitude_", shared_space_name))],
method = "euclidean")
distance_matrix <- as.matrix(
dist(
pop_data[, c("src_latitude", "src_longitude")],
shared_space_data[, c(paste0("latitude_", shared_space_name), paste0("longitude_", shared_space_name))],
method = "euclidean")
)
distance_matrix
dim(distance_matrix)
src_coordinates <- pop_data[, c("src_latitude", "src_longitude")]
shared_coordinates <- shared_space_data[, c(paste0("latitude_", shared_space_name), paste0("longitude_", shared_space_name))]
distance_matrix <- as.matrix(dist(rbind(src_coordinates, shared_coordinates), method = "euclidean"))
x <- as.matrix(dist(rbind(src_coordinates, shared_coordinates), method = "euclidean"))
shared_coordinates
src_coordinates
rbind(src_coordinates, shared_coordinates)
rbind(src_coordinates, shared_coordinates)
source("~/Github/Syspop/syspop/run_nz.R")
distance_matrix <- as.matrix(dist(rbind(src_coordinates, shared_coordinates), method = "euclidean"))
library(stats)
distance_matrix <- as.matrix(dist(rbind(src_coordinates, shared_coordinates), method = "euclidean"))
colnames(shared_coordinates) <- c("src_latitude", "src_longitude")
combined_coordinates <- rbind(src_coordinates, shared_coordinates)
shared_coordinates
distance_matrix <- as.matrix(dist(combined_coordinates, method = "euclidean"))
dim(distance_matrix)
distance_matrix <- distance_matrix[1:nrow(src_coordinates), (nrow(src_coordinates) + 1):ncol(distance_matrix)]
dim(distance_matrix)
source("~/Github/Syspop/syspop/run_nz.R")
distance_matrix
dim(distance_matrix)
nearest_indices <- apply(distance_matrix, 1, which.min)
nearest_rows <- shared_space_data[nearest_indices, , drop = FALSE]
colnames(nearest_rows)[colnames(nearest_rows) == shared_space_name] <- paste0("tmp_", i)
nearest_rows <- nearest_rows[, !colnames(nearest_rows) %in% "area"]
dis_value <- distance_matrix[cbind(seq(0, length(nearest_indices)), nearest_indices)]
dim(distance_matrix)
distance_matrix[seq(0, length(nearest_indices), nearest_indices)]
typeof(distance_matrix)
distance_matrix
distance_matrix[3,5]
distance_matrix[3:11,5]
dis_value <- distance_matrix[1:length(nearest_indices), nearest_indices]
View(dis_value)
dis_indices <- which(
dis_value > global_vars$shared_space_nearest_distance_km[[shared_space_name]] / 110.0)
message(sprintf("%s(%d, %s): Removing %.2f%% due to distance", shared_space_name, i, area_name_key, (length(dis_indices) / length(dis_value)) * 100.0))
source("~/Github/Syspop/syspop/run_nz.R")
nearest_rows[dis_indices, ] <- NA
dis_indices
nearest_rows
typeof(nearest_rows)
typeof(dis_indices)
dis_indices
nearest_rows[dis_indices, ] <- NA
for (i in dis_indices) {
nearest_rows[[i]] <- NA  # Use double brackets to assign NA to the list element
}
nearest_rows
View(nearest_rows)
source("~/Github/Syspop/syspop/run_nz.R")
dis_indices
i
nearest_rows[[i]]
nearest_rows
typeof(nearest_rows)
nearest_rows[[1]]
nearest_rows[[3]]
dim(nearest_rows)
nearest_rows[[3]]
nearest_rows[[3]] <- NA
nearest_rows[[3]]
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
i
nearest_rows[[i]] <- NA
nearest_rows
length(nearest_rows)
dim(nearest_rows)
dis_indices
dim(dis_indices)
dim(dis_value)
nearest_indices
dim(nearest_indices)
nearest_indices <- apply(distance_matrix, 1, which.min)
nearest_indices
dim(nearest_indices)
nearest_indices
print(nearest_indices)
nearest_indices <- apply(distance_matrix, 2, which.min)
nearest_indices
nearest_indices <- apply(distance_matrix, 3, which.min)
nearest_indices <- apply(distance_matrix, 1, which.min)
nearest_indices
length(nearest_indices)
distance_matrix
typeof(distance_matrix)
dis_value <- distance_matrix[1:length(nearest_indices), nearest_indices]
typeof(dis_value)
dim(dis_value)
nearest_indices
dim(nearest_indices)
list(nearest_indices)
dim(list(nearest_indices))
nearest_indices[3]
nearest_indices["100"]
nearest_indices[50000]
nearest_indices[5000]
length(nearest_indices)
dim(distance_matrix)
distance_matrix[1:3, 3]
distance_matrix[1:3, 1]
distance_matrix[1:3,]
distance_matrix[1:3,3]
distance_matrix[1:3,0]
distance_matrix[1:3,1]
nearest_indices
typeof(nearest_indices)
dis_value <- distance_matrix[1:length(nearest_indices), nearest_indices]
dim(dis_value)
dis_value <- as.vector(distance_matrix[1:length(nearest_indices), nearest_indices])
dim(dis_value)
dis_value
distance_matrix[1:length(nearest_indices), nearest_indices])
x <- distance_matrix[1:length(nearest_indices), nearest_indices]
dim(x)
dis_value <- distance_matrix[cbind(seq_along(nearest_indices) , nearest_indices)]
dim(dis_value)
dis_value
dis_indices <- which(
dis_value > global_vars$shared_space_nearest_distance_km[[shared_space_name]] / 110.0)
dis_indices
for (i in dis_indices) {
nearest_rows[[i]] <- NA  # Use double brackets to assign NA to the list element
}
nearest_rows
source("~/Github/Syspop/syspop/run_nz.R")
i
for (i in dis_indices) {
nearest_rows[[i]] <- NA  # Use double brackets to assign NA to the list element
}
nearest_rows
dis_indices
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
dis_indices
max(dis_indices)
length(dis_indices)
dim(nearest_rows)
nearest_rows[5448]
nearest_rows[5443]
nearest_rows[[5443]]
nearest_rows
nearest_rows[[1]]
View(nearest_rows)
nearest_rows[[5448]]
nearest_rows[5448,]
for (i in dis_indices) {
nearest_rows[i, ] <- NA  # Use double brackets to assign NA to the list element
}
nearest_rows
nearest_rows[3, ] <- NA
nearest_rows
source("~/Github/Syspop/syspop/run_nz.R")
nearest_rows
pop_data
View(pop_data)
nearest_rows
pop_data
dim(pop_data)
dim(nearest_rows)
pop_data <- cbind(pop_data, nearest_rows)
area_name_key
pop_data[pop_data[[area_name_key]] == -9999, paste0("tmp_", i)] <- ""
pop_data <- pop_data[, !colnames(pop_data) %in% c(paste0("latitude_", shared_space_name), paste0("longitude_", shared_space_name))]
View(pop_data)
source("~/Github/Syspop/syspop/run_nz.R")
distance_matrix
dim(distance_matrix)
distance_matrix[cbind(1:nrow(distance_matrix), nearest_indices + 1)] <- Inf
distance_matrix
source("~/Github/Syspop/syspop/run_nz.R")
View(pop_data)
source("~/Github/Syspop/syspop/run_nz.R")
distance_matrix
distance_matrix
nearest_indices
distance_matrix[cbind(seq_along(nearest_indices), nearest_indices)] <- Inf
distance_matrix
dim(distance_matrix)
nearest_indices
nearest_indices <- apply(distance_matrix, 1, which.min)
nearest_indices
source("~/Github/Syspop/syspop/run_nz.R")
View(pop_data)
for (i in 0:(num_nearest - 1)) {
if (!is.null(pop_data[[shared_space_name]])) {
pop_data[[shared_space_name]] <- paste0(
pop_data[[shared_space_name]],
",",
pop_data[[paste0("tmp_", i)]],
","
)
} else {
pop_data[[shared_space_name]] <- pop_data[[paste0("tmp_", i)]]
}
pop_data <- pop_data[, !colnames(pop_data) %in% paste0("tmp_", i)]
}
source("~/Github/Syspop/syspop/run_nz.R")
pop_data[[paste0("tmp_", i)]]
pop_data
for (i in 0:(num_nearest - 1)) {
# Convert the column tmp_i to character and concatenate to shared_space_name
pop_data$shared_space_name <- paste(
pop_data$shared_space_name,
as.character(pop_data[[paste0("tmp_", i)]]),
sep = ","
)
# Remove the temporary column
pop_data[[paste0("tmp_", i)]] <- NULL
}
source("~/Github/Syspop/syspop/run_nz.R")
shared_space_name
View(pop_data)
View(pop_data)
pop_data$shared_space_name <- gsub("^,", "", pop_data$shared_space_name)
View(pop_data)
pop_data$shared_space_name <- ifelse(
pop_data$shared_space_name == "NA,NA",
NA,
gsub(",NA$", "", pop_data$shared_space_name)
)
View(pop_data)
View(pop_data)
View(pop_data)
pop_data <- pop_data[, !colnames(pop_data) %in% c("src_latitude", "src_longitude")]
source("~/Github/Syspop/syspop/run_nz.R")
View(pop_data)
shared_space_data
address_data <- add_shared_space_address(pop_data, shared_space_data, address_data, shared_space_name)
shared_space_name
pop_data[[shared_space_name]]
source("~/Github/Syspop/syspop/run_nz.R")
View(pop_data)
shared_space_name
colnames(df)
colnames(pop_data)[colnames(pop_data) == "shared_space_name"] <- shared_space_name
View(pop_data)
address_data <- add_shared_space_address(pop_data, shared_space_data, address_data, shared_space_name)
View(address_data)
source("~/Github/Syspop/syspop/run_nz.R")
View(pop_data)
source("~/Github/Syspop/syspop/run_nz.R")
View(pop_data)
address_data <- add_shared_space_address(pop_data, shared_space_data, address_data, shared_space_name)
View(address_data)
# Define the function to remove duplicates from a comma-separated string
remove_duplicates_shared_space <- function(row) {
# Split the row into individual values using the comma as a separator
values <- unlist(strsplit(row, ","))
# Remove duplicates by converting to a unique set
unique_values <- unique(values)
# Join the unique values back into a single string, separated by commas
return(paste(unique_values, collapse = ","))
}
source("~/Github/Syspop/syspop/run_nz.R")
View(pop_data)
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
debugSource("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
debugSource("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
base_pop <- read_parquet(file.path(tmp_dir, "syspop_base.parquet"))
View(base_pop)
source("~/Github/Syspop/syspop/run_nz.R")
base_pop <- read_parquet(file.path(tmp_dir, "syspop_base.parquet"))
shared_space_type
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
pop_data[[shared_space_name]]
unlist(strsplit(pop_data[[shared_space_name]], ","))
strsplit(pop_data[[shared_space_name]], ","
)
pop_data[[shared_space_name]]
is.null(pop_data[[shared_space_name]])
is.na(pop_data[[shared_space_name]])
unique(unlist(strsplit(pop_data[[shared_space_name]], ",")))
result <- tryCatch(
{
# This is the code that may throw an error
unique_shared_space <- unique(unlist(strsplit(pop_data[[shared_space_name]], ",")))
},
error = function(e) {
# This is the code that runs if there is an error
message("Caught an error (no address needed): ", e$message)
return(NA)
}
)
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
result
is.null(result)
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
inherits
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
