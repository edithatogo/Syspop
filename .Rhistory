setwd("~/Github/Syspop")
renv::restore()
1
1
renv::restore()
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
syn_population_structure <- write_parquet(file.path(output_dir, "syspop_base.parquet"))
file.path(output_dir, "syspop_base.parquet")syn_population_structure <- read_parquet(file.path(output_dir, "syspop_base.parquet"))
syn_population_structure <- read_parquet(file.path(output_dir, "syspop_base.parquet"))
View(syn_population_structure)
population_structure
syn_population_structure
renv::restore()
source("~/Github/Syspop/etc/examples/run_nz.R")
install.packages("shiny")
shiny::runApp('etc/rshiny')
install.packages("ggplot2")
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
input$file
runApp('etc/rshiny')
df
df()
output
df
df()
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
req(df)
names(df)
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
df
runApp('etc/rshiny')
df
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
input$area
length(input$area)
req(df, input$area)
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
filtered_df()
input$x
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
x <- filtered_df()
x
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
file_path <- paste0("/private/tmp/syspop/", input$file_choice)
file_path
read_parquet(file_path)
runApp('etc/rshiny')
df$area
Q
runApp('etc/rshiny')
runApp('etc/rshiny')
df()$area
df
df()
source("~/Github/Syspop/etc/examples/run_nz.R")
base_pop
base_pop$index
source("~/Github/Syspop/etc/examples/run_nz.R")
runApp('etc/rshiny')
df <- read_parquet(file_path)
df
source("~/Github/Syspop/etc/examples/run_nz.R")
runApp('etc/rshiny')
df <- read_parquet(file_path)
View(df)
df$composition <- str_extract(df$household, "(?<=_)[0-9]+-[0-9]+(?=_)")
library(stringr)
df$composition <- str_extract(df$household, "(?<=_)[0-9]+-[0-9]+(?=_)")
View(df)
df <- unique(df)
df
runApp('etc/rshiny')
input$file_choice
names(filtered_df())
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
View(df)
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
df_base
df
combined_df <- merge(df, df_base, by = "id")
View(combined_df)
df
df <- na.omit(df)
df2 <- merge(df, df_base, by = "id")
View(df2)
runApp('etc/rshiny')
runApp('etc/rshiny')
renv::snapshot()
source("~/Github/Syspop/etc/examples/run_nz.R")
household_dataset
household_dataset %>%
group_by(area) %>%
mutate(percentage = num / sum(num)) %>%
ungroup()
shiny::runApp('etc/rshiny')
runApp('etc/rshiny')
source("~/Github/Syspop/etc/examples/run_nz.R")
runApp('etc/rshiny')
debugSource("~/Github/Syspop/etc/examples/run_nz.R")
debugSource("~/Github/Syspop/etc/examples/run_nz.R")
debugSource("~/Github/Syspop/etc/examples/run_nz.R")
debugSource("~/Github/Syspop/etc/examples/run_nz.R")
test_data$population_structure
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
population
source("~/Github/Syspop/etc/examples/run_nz.R")
populationpopulation
population
debugSource("~/Github/Syspop/etc/examples/run_nz.R")
nz_data
test_data$population_structure
source("~/Github/Syspop/etc/examples/run_nz.R")
population
population$structure
source("~/Github/Syspop/etc/examples/run_nz.R")
create_base_pop(
tmp_dir,
population$structure,
syn_areas)
population$structure
population
population
debugSource("~/Github/Syspop/etc/examples/run_nz.R")
population = list(
structure = test_data$structure
)
population
list(
structure = test_data$structure
)
test_data$structure
test_data
source("~/Github/Syspop/etc/examples/run_nz.R")
test_data$pocreate_base_pop(
tmp_dir,
population$structure,
syn_areas)
population$structure
source("~/Github/Syspop/etc/examples/run_nz.R")
pop_structure
base_pop_wrapper(pop_structure, syn_areas)
output <- base_pop_wrapper(pop_structure, syn_areas)
output
write_parquet(output, file.path(tmp_dir, "syspop_base.parquet"))
base_address
base_address <- data.frame(type = character(),
name = character(),
latitude = numeric(),
longitude = numeric(),
stringsAsFactors = FALSE)
write_parquet(base_address, file.path(tmp_dir, "syspop_location.parquet"))
source("~/Github/Syspop/etc/examples/run_nz.R")
nz_data <- new_zealand()
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
nz_data$geography_hierarchygeography$address
household
geography
geography$address
create_household(
tmp_dir,
household,
geography$address)
source("~/Github/Syspop/etc/examples/run_nz.R")
base_pop <- read_parquet(file.path(tmp_dir, "syspop_base.parquet"))
base_address <- read_parquet(file.path(tmp_dir, "syspop_location.parquet"))
household_data
household_data$index <- seq_len(nrow(household_data))
nrow(household_data)
household_data
source("~/Github/Syspop/etc/examples/run_nz.R")
geography$hierarchy
debugSource("~/Github/Syspop/etc/examples/run_nz.R")
nz_data$work_employee
source("~/Github/Syspop/etc/examples/run_nz.R")
employer_data
employee_data
base_pop
base_address
travel_to_work_data
geo_hierarchy
geo_address
source("~/Github/Syspop/syspop/r/create_pop_wrapper.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
commute_dataset
travel_methods <- setdiff(colnames(commute_dataset), c("area_home", "area_work"))
travel_methods
View(commute_dataset)
commute_dataset <- get_commute_agents_percentage(commute_dataset, travel_methods)
View(commute_dataset)
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
debugSource("~/Github/Syspop/etc/examples/run_nz.R")
nz_data$school
nz_data$kindergarten
nz_data$shared_space_supermarket
source("~/Github/Syspop/etc/examples/run_nz.R")
shared_space
shared_space[["park"]]
shared_space$park
shared_space_name
geography$location
shared_place_area_nums[[shared_space_name]]
create_shared_space(
tmp_dir,
shared_space[[shared_space_name]],
shared_space_name,
geography$location,
area_name_keys_and_selected_nums = shared_place_area_nums[[shared_space_name]]
)
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
paste0("Creating ", shared_space_name, )
paste0("Creating ", "xxx", )
paste0("Creating ", "xxx")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
pop_data
src_coordinates <- pop_data[, c("src_latitude", "src_longitude")]
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
geography_location_data
pop_data
geography_location_data_updated <- geography_location_data
names(geography_location_data_updated)[names(geography_location_data_updated) == "area"] <- area_name_key
names(geography_location_data_updated)[names(geography_location_data_updated) == "latitude"] <- paste0(area_name_key, "_latitude")
names(geography_location_data_updated)[names(geography_location_data_updated) == "longitude"] <- paste0(area_name_key, "_longitude")
pop_data <- merge(
pop_data,
geography_location_data_updated,
by = "area_work",
all.x = TRUE
)
pop_data
names(pop_data)
paste0("area_work_", area_name_key, "_latitude")]
paste0("area_work_", area_name_key, "_latitude")
geography_location_data
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
distance_matrix
nearest_indices <- apply(distance_matrix, 1, which.min)
nearest_indices
shared_space_data[nearest_indices, , drop = FALSE]
nearest_indices
typeof(nearest_indices)
num_nearest
i
num_nearest - 1
num_nearest
area_name_key
source("~/Github/Syspop/etc/examples/run_nz.R")
rlang::last_trace()
source("~/Github/Syspop/etc/examples/run_nz.R")
shiny::runApp('etc/rshiny')
source("~/Github/Syspop/etc/examples/run_nz.R")
shiny::runApp('etc/rshiny')
runApp('etc/rshiny')
base_dir_truth <- "~/Github/Syspop/etc/data/test_data/"
df_pop_truth <- read_parquet(paste0(base_dir_truth, "population_structure.parquet"))
df_pop_truth
runApp('etc/rshiny')
filtered_df()
filtered_df_truth()
runApp('etc/rshiny')
filtered_df_truth()
input$x
runApp('etc/rshiny')
runApp('etc/rshiny')
df_pop_truth
df_pop$area
unique(df_pop$area)
df_pop_truth <- df_pop_truth[df_pop_truth$area %in% unique(df_pop$area), ]
runApp('etc/rshiny')
filtered_df_truth()
input$x
ggplot(filtered_df_truth(), aes(x = input$x)) +
geom_bar(stat = "dodge") +
theme_minimal() +
labs(x = "Ethnicity", y = "Count")
filtered_df_truth
runApp('etc/rshiny')
ggplot(filtered_df_truth(), aes(x = input$x)) +
geom_bar(stat = "dodge") +
theme_minimal() +
labs(x = "Ethnicity", y = "Count")
ggplot(filtered_df_truth(), aes(x = input$x)) +
geom_bar(position = "dodge") +
theme_minimal() +
labs(x = "Ethnicity", y = "Count")
ggplot(filtered_df_truth(), aes_string(x = input$x)) +
geom_bar(position = "dodge") +
theme_minimal() +
labs(x = "Ethnicity", y = "Count")
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
runApp('etc/rshiny')
library(gridExtra)
renv::restore()
install.packages("gridExtra")
runApp('etc/rshiny')
runApp('etc/rshiny')
renv::snapshot()
source("~/Github/Syspop/etc/examples/run_nz.R")
rlang::last_trace()
source("~/Github/Syspop/etc/examples/run_nz.R")
household_dataset
household_dataset %>%
group_by(area) %>%
mutate(percentage = num / sum(num)) %>%
ungroup()
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
file.path(tmp_dir, "syspop_base.parquet")
read_parquet(file.path(tmp_dir, "syspop_base.parquet"))
base_pop <- read_parquet(file.path(tmp_dir, "syspop_base.parquet"))
base_address <- read_parquet(file.path(tmp_dir, "syspop_location.parquet"))
household_data$index <- seq_len(nrow(household_data))
household_wrapper(
household_data,
base_pop,
base_address,
geo_address_data=geo_address_data
)
source("~/Github/Syspop/etc/examples/run_nz.R")
household_dataset
household_dataset %>%
group_by(area) %>%
mutate(percentage = value / sum(value)) %>%
ungroup()
household_dataset <- household_dataset %>%
group_by(area) %>%
mutate(percentage = value / sum(value)) %>%
ungroup()
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/syspop/r/create_pop_wrapper.R")
source("~/Github/Syspop/syspop/r/create_pop_wrapper.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
read_parquet(file.path(tmp_dir, "syspop_base.parquet"))
file.path(tmp_dir, "syspop_base.parquet")
tmp_dir
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
ref_adult
unassigned_adults
remained_adults
ref_adult
ref_adult$index
probabilities <- ifelse(
remained_adults$ethnicity == ref_adult$ethnicity,
ref_ethnicity_prob,
1 - ref_ethnicity_prob)
remained_adults$ethnicity
ref_adult$ethnicity
probabilities <- ifelse(
remained_adults$ethnicity == ref_adult$ethnicity,
ref_ethnicity_prob,
1 - ref_ethnicity_prob)
ref_ethnicity_prob
1ref_ethnicity_prob
ref_ethnicity_prob
source("~/Github/Syspop/etc/examples/run_nz.R")
ref_adult <- unassigned_adults[sample(1:nrow(unassigned_adults), 1), ]
remained_adults <- unassigned_adults[unassigned_adults$index != ref_adult$index, ]
# Initialize list of adult ids
adult_ids <- as.list(ref_adult$index)
# Define probabilities for sampling based on ethnicity
probabilities <- ifelse(
remained_adults$ethnicity == ref_adult$ethnicity,
ref_ethnicity_prob,
1 - ref_ethnicity_prob)
probabilities
unassigned_adults
unassigned_adults$ethnicity
unique(unassigned_adults$ethnicity)
probabilities
min(probabilities)
probabilities <- probabilities / sum(probabilities)
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
source("~/Github/Syspop/etc/examples/run_nz.R")
