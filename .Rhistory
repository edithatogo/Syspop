df_gender_melt %>%
filter(area == output_area, age == age)
df_gender_melt %>%
filter(area == output_area, age == "1")
age
age[1]
age[0]
age[3]
age[1]
df_gender_melt %>%
filter(area == output_area, age == age[1])
output_area
source("~/Github/Syspop/syspop/run_nz.R")
df_gender_melt %>%
filter(area == output_area, age == output_age) %>%
select(gender, prob, count)
source("~/Github/Syspop/syspop/run_nz.R")
ethnicity_probs
ref_population
gender_probs
n_individuals
sample(gender_probs$gender, size = n_individuals, prob = gender_probs$prob, replace = TRUE)
sample(gender_probs$gender, size = n_individuals, prob = gender_probs$prob, replace = TRUE)
sample(gender_probs$gender, size = n_individuals, prob = gender_probs$prob, replace = TRUE)
sample(gender_probs$gender, size = n_individuals, prob = gender_probs$prob, replace = TRUE)
sample(gender_probs$gender, size = n_individuals, prob = gender_probs$prob, replace = TRUE)
data.frame(
area = rep(output_area, n_individuals),
age = rep(age, n_individuals),
gender = genders,
ethnicity = ethnicities
)
data.frame(
area = rep(output_area, n_individuals),
age = rep(output_age, n_individuals),
gender = genders,
ethnicity = ethnicities
)
source("~/Github/Syspop/syspop/run_nz.R")
results
population <- unlist(results)
population
output_df <- data.frame(population)
View(output_df)
results
results[1]
results[2]
result
source("~/Github/Syspop/syspop/run_nz.R")
population
source("~/Github/Syspop/syspop/run_nz.R")
result
results
results <- c(results, result)
results
results[1]
results
result
typeof(results)
library(purrr)
results <- list()
results%>% append(result)
results
results[1]
result
typeof(result)
df <- data.frame(result)
df
typeof(df)
results <- list()
results%>% append(df)
typeof(df)
library(data.table)
renv::install("data.table")
library(data.table)
install.packages("data.table")
library(data.table)
df = as.data.table(result)
df
typeof(df)
result
result <- append(result, result)
result
typeof(result)
result[1]
result[2]
View(df)
typeof(gender_data)
do.call(rbind.data.frame, gender_data)
x<-do.call(rbind.data.frame, gender_data)
View(x)
View(df)
df
result_df <- rbind(df, df)
View(result_df)
source("~/Github/Syspop/syspop/run_nz.R")
population
View(population)
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
renv::snapshot()
debugSource("~/Github/Syspop/syspop/run_nz.R")
test_data$`geog_data//hierarchy`
test_data$`geog_data//hierarchy`$area
unique(test_data$`geog_data//hierarchy`$area)
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
df_ethnicity_melt %>%
filter(area == output_area, age == output_age) %>%
select(ethnicity, prob, count)
df_gender_melt %>%
filter(area == output_area, age == output_age) %>%
select(gender, prob, count)
View(population)
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
test_data$`geog_data//hierarchy`
syn_areas <- test_data$geog_data$hierarchy %>%
filter(region == "Wellington") %>%
pull(area)
syn_areas <- test_data$`geog_data//hierarchy` %>%
filter(region == "Wellington") %>%
pull(area)
syn_areas
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
debugSource("~/Github/Syspop/syspop/run_nz.R")
test_data$`household_data//household`
source("~/Github/Syspop/syspop/run_nz.R")
test_data$`household_data//household`assign_address_flag
assign_address_flag
geo_address
geo_location
source("~/Github/Syspop/syspop/run_nz.R")
test_data$`geog_data//address`
test_data$`geog_data//location`
test_data$`geog_data//address`
source("~/Github/Syspop/syspop/run_nz.R")
base_pop <- read_parquet(file.path(tmp_dir, "syspop.parquet"))
base_pop
renv::restore()
install.packages("uuid")
source("~/Github/Syspop/syspop/run_nz.R")
household_dataset
all_areas <- unique(base_pop$area)
proc_base_pop <- base_pop[base_pop$area == proc_area, , drop = FALSE]
View(proc_base_pop)
household_dataset
proc_base_pop
proc_household_dataset
proc_base_pop
proc_household_dataset
x <- sort_household_v2(
proc_household_dataset, exclude_hhd_composition_indices)
exclude_row_indices
proc_household_dataset[-exclude_row_indices, ]
exclude_row_indices <- c()
exclude_row_indices
proc_household_dataset[-exclude_row_indices, ]
proc_household_dataset
proc_household_dataset$percentage
sample_row <- proc_household_dataset[sample(nrow(proc_household_dataset), 1,
prob = proc_household_dataset$percentage), ]
sample_row
proc_household_dataset[sample(nrow(proc_household_dataset), 1,
+                                             prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
proc_household_dataset[sample(nrow(proc_household_dataset), 1, prob = proc_household_dataset$percentage), ]
source("~/Github/Syspop/syspop/run_nz.R")
proc_household_composition
household_id
unassigned_adults
proc_household_composition$adults
proc_household_composition$adults[1]
proc_household_composition
proc_household_compositionnrow(unassigned_adults) < proc_household_composition$adults
nrow(unassigned_adults) < proc_household_composition$adults[1]
nrow(unassigned_adults) < proc_household_composition$adults
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
while (TRUE) {
proc_household_composition <- sort_household_v2(
proc_household_dataset, exclude_hhd_composition_indices)
household_id <- substr(uuid::UUIDgenerate(), 1, 6)
if (is.null(proc_household_composition)) {
break
}
if (nrow(unassigned_adults) < proc_household_composition$adults ||
nrow(unassigned_children) < proc_household_composition$children) {
exclude_hhd_composition_indices <- c(exclude_hhd_composition_indices, proc_household_composition$index)
next
}
browser()
adult_ids <- obtain_adult_index_based_on_ethnicity(
unassigned_adults,
proc_household_composition,
unique_base_pop_ethnicity
)
children_ids <- tryCatch({
sample(unassigned_children$index[unassigned_children$ethnicity == adult_ids$ref_ethnicity],
proc_household_composition$children[1])
}, error = function(e) {
sample(unassigned_children$index, proc_household_composition$children[1])
})
proc_base_pop <- assign_household_and_dwelling_id(
proc_base_pop,
paste0("household_", proc_area, "_", length(adult_ids), "-", length(children_ids), "_", household_id),
adult_ids,
children_ids,
proc_household_composition
)
unassigned_adults <- unassigned_adults[!unassigned_adults$index %in% adult_ids, ]
unassigned_children <- unassigned_children[!unassigned_children$index %in% children_ids, ]
}
source("~/Github/Syspop/syspop/run_nz.R")
unassigned_adults
proc_household_composition
ref_adult_ethnicity
proc_household_composition$adults
adult_ids
children_ids <- tryCatch({
sample(unassigned_children$index[unassigned_children$ethnicity == adult_ids$ref_ethnicity],
proc_household_composition$children[1])
}, error = function(e) {
sample(unassigned_children$index, proc_household_composition$children[1])
})
children_ids
children_ids
proc_base_pop
adult_ids
length(adult_ids)
source("~/Github/Syspop/syspop/run_nz.R")
adult_ids
ref_adult
ref_adult$index
ref_adult$index
ref_adult
source("~/Github/Syspop/syspop/run_nz.R")
proc_base_pop
source("~/Github/Syspop/syspop/run_nz.R")
population
seq_len(nrow(population))
population$index <- seq_len(nrow(population))
population
source("~/Github/Syspop/syspop/run_nz.R")
unassigned_adults
proc_household_composition
unique_base_pop_ethnicity
unassigned_adults
adult_ids
children_ids
source("~/Github/Syspop/syspop/run_nz.R")
proc_base_pop
adult_ids
proc_adult
children_ids
proc_household_composition
proc_adult$adult_ids
proc_adult$adult_ids[1]
proc_adult$adult_ids[2]
proc_adult$adult_ids[3]
proc_adult$adult_ids[4]
length(proc_adult$adult_ids)
proc_adult
proc_adult[1]
proc_adult$adult_ids
unlist(proc_adult$adult_ids)
children_ids
proc_household_composition
source("~/Github/Syspop/syspop/run_nz.R")
adult_ids
children_ids
length(children_ids)
household_id
source("~/Github/Syspop/syspop/run_nz.R")
adult_ids
proc_base_pop$household[proc_base_pop$index %in% adult_ids] <- as.character(household_id)
View(proc_base_pop)
View(proc_base_pop)
adult_ids
source("~/Github/Syspop/syspop/run_nz.R")
adult_ids
proc_base_pop$household[proc_base_pop$index %in% adult_ids] <- as.character(household_id)
household_id
View(proc_base_pop)
View(proc_base_pop)
children_ids
children_ids
source("~/Github/Syspop/syspop/run_nz.R")
proc_household_composition
View(proc_base_pop)
proc_base_pop
proc_adult$adult_ids
View(proc_base_pop)
source("~/Github/Syspop/syspop/run_nz.R")
proc_base_pop
View(proc_base_pop)
source("~/Github/Syspop/syspop/run_nz.R")
View(proc_base_pop)
proc_base_pop
View(proc_base_pop)
length(adult_ids)
source("~/Github/Syspop/syspop/run_nz.R")
View(proc_base_pop)
View(proc_base_pop)
unassigned_adults
len(unassigned_adults)
adult_ids
unassigned_adults
View(proc_household_composition)
unassigned_adults
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
exclude_hhd_composition_indices
proc_household_composition
source("~/Github/Syspop/syspop/run_nz.R")
proc_household_compositionexclude_hhd_composition_indices
exclude_hhd_composition_indices
proc_household_composition
proc_household_dataset
proc_household_dataset
exclude_row_indices
proc_household_dataset$index.not_inexclude_row_indices
exclude_row_indices
proc_household_dataset[!proc_household_dataset$index %in% exclude_row_indices, ]
source("~/Github/Syspop/syspop/run_nz.R")
proc_household_composition
proc_household_composition
exclude_hhd_composition_indices
proc_household_composition$index
proc_household_composition
proc_household_dataset
proc_household_composition
proc_household_dataset
source("~/Github/Syspop/syspop/run_nz.R")
proc_base_pop
View(proc_base_pop)
unassigned_adults
unassigned_children
unique(proc_base_pop$household)
existing_households
unassigned_adults
unassigned_children
source("~/Github/Syspop/syspop/run_nz.R")
results
results[1]
results[2]
result_index
base_pop
proc_base_pop
result_index
base_pop
base_pop[base_pop$index %in% result_index, ] <- result
View(base_pop)
source("~/Github/Syspop/syspop/run_nz.R")
base_pop
geo_address_data
base_pop
source("~/Github/Syspop/syspop/run_nz.R")
base_pop
address_data
address_type
all_areas
proc_address_data
base_pop
proc_pop_data
address_type
unique(proc_pop_data[["household"]])
length(unique(proc_pop_data[["household"]]))
length((proc_pop_data[["household"]]))
source("~/Github/Syspop/syspop/run_nz.R")
start_time <- Sys.time()
all_areas <- unique(base_pop$area)
results <- list()
for (i in seq_along(all_areas)) {
proc_area <- all_areas[i]
message(sprintf("%d/%d: Processing %s", i, length(all_areas), proc_area))
proc_address_data <- address_data[address_data$area == proc_area, ]
area_type <- "area"
if (address_type == "company") {
area_type <- "area_work"
}
proc_pop_data <- base_pop[base_pop[[area_type]] == proc_area, ]
processed_address <- assign_place_to_address(address_type, proc_pop_data, proc_address_data, proc_area)
results[[i]] <- processed_address
}
results
source("~/Github/Syspop/syspop/run_nz.R")
results
results[1]
results[2]
processed_address
flattened_results <- do.call(c, results)
View(flattened_results)
flattened_results
proc_result
results_dict
View(results_dict)
results_dict
data.frame(results_dict)
source("~/Github/Syspop/syspop/run_nz.R")
results_df
View(results_df)
address_type
source("~/Github/Syspop/syspop/run_nz.R")
proc_address_data
source("~/Github/Syspop/syspop/run_nz.R")
base_address
proc_address_data
base_pop
base_address
source("~/Github/Syspop/syspop/run_nz.R")
base_address
View(base_address)
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
x
x$base_pop
x$base_address
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
output$base_pop
write_parquet(output$base_pop, file.path(tmp_dir, "syspop_base.parquet"))
tmp_dir
file.path(tmp_dir, "syspop_base.parquet")
output$base_pop
typeof(output$base_pop)
write_parquet(output$base_pop, file.path(tmp_dir, "syspop_base.parquet"))
base_pop <- read_parquet(file.path(tmp_dir, "syspop_base.parquet"))
base_pop
source("~/Github/Syspop/syspop/run_nz.R")
output$base_pop
write_parquet(output$base_address, file.path(tmp_dir, "syspop_location.parquet"))
source("~/Github/Syspop/syspop/run_nz.R")
output$base_pop
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
deps_list
item_to_check
deps_list[3]
deps_list[4]
deps_list
deps_list[3]
deps_list[5]
deps_list[100]
x <- c(1,2,3,)
x
x <- c(1,2,3)
x
x <- c(1,2,3,c(44,55,66))
x
x <- c(1,2,3,c(44,55,66,c))
x
x <- c(1,2,3,c(44,55,66))
x
x[3]
x[4]
x[[4]]
x <- list(c(1,2,3,c(44,55,66)))
x[4]
x[[4]
]
x[[1]]
x <- list(1, 2, 3, c(44, 55, 66))
x[[4]]
x
source("~/Github/Syspop/syspop/run_nz.R")
deps_list
deps_list[1]
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
item_to_check
item_to_check
item_to_check
key_item
item_to_check
key_item
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
source("~/Github/Syspop/syspop/run_nz.R")
renv::snapshot()
